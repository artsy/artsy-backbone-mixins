// Generated by CoffeeScript 1.12.7
(function() {
  var API_URL, Artworks, Backbone, FeaturedLinks, FeaturedSet, Sale, _;

  _ = require('underscore');

  Backbone = require('backbone');

  API_URL = '';

  Sale = '';

  Artworks = '';

  FeaturedSet = '';

  FeaturedLinks = '';

  module.exports = function(a, b, c, d, e) {
    API_URL = a;
    Sale = b;
    Artworks = c;
    FeaturedSet = d;
    FeaturedLinks = e;
    return module.exports.methods;
  };

  module.exports.methods = {
    fetchSets: function(options) {
      if (options == null) {
        options = {};
      }
      return this.fetchSetsAndItems({
        success: (function(_this) {
          return function(setItems) {
            var allItemsLen, callback, err, i, items, len, orderedSet, ref, sale, sets;
            allItemsLen = _.flatten(_.pluck(setItems, 'item')).length;
            err = null;
            callback = _.after(allItemsLen, function() {
              if (err) {
                return options.error(err);
              }
              return typeof options.success === "function" ? options.success(sets || _this.setsFromSetItems(setItems)) : void 0;
            });
            for (i = 0, len = setItems.length; i < len; i++) {
              ref = setItems[i], orderedSet = ref.orderedSet, items = ref.items;
              if (!items.length || !orderedSet.get('display_on_desktop')) {
                callback();
                continue;
              }
              switch (orderedSet.get('item_type')) {
                case 'FeaturedLink':
                  orderedSet.set({
                    data: items,
                    type: 'featured links'
                  });
                  callback();
                  break;
                case 'Sale':
                  orderedSet.set({
                    type: 'artworks'
                  });
                  _this.set({
                    sale: (sale = new Sale(items.first().toJSON()))
                  });
                  sale.fetchArtworks({
                    each: options.artworkPageSuccess,
                    success: _.bind((function(orderedSet, saleArtworks) {
                      orderedSet.set({
                        data: Artworks.fromSale(saleArtworks),
                        display_artist_list: sale.get('display_artist_list')
                      });
                      if (typeof options.artworksSuccess === "function") {
                        options.artworksSuccess(orderedSet);
                      }
                      return callback();
                    }), _this, orderedSet),
                    error: function(e) {
                      err = e;
                      return callback();
                    }
                  });
                  break;
                default:
                  callback();
              }
            }
            sets = _this.setsFromSetItems(setItems);
            return typeof options.setsSuccess === "function" ? options.setsSuccess(sets) : void 0;
          };
        })(this),
        error: options.error
      });
    },
    setsFromSetItems: function(setItems) {
      return _.sortBy(_.pluck(setItems, 'orderedSet'), function(set) {
        return set.get('key');
      });
    },
    fetchSetsAndItems: function(options) {
      var finalHashes, sets;
      finalHashes = [];
      sets = new Backbone.Collection([], {
        model: FeaturedSet
      });
      sets.url = API_URL + "/api/v1/sets";
      return sets.fetch({
        data: {
          owner_type: 'Feature',
          owner_id: this.get('id'),
          size: 50
        },
        success: (function(_this) {
          return function(sets) {
            var err, error, i, len, orderedSet, ref, results, success;
            err = null;
            success = _.after(sets.length, function() {
              if (err) {
                return options.error(err);
              }
              return options.success(finalHashes);
            });
            error = function(e) {
              err = e;
              return success();
            };
            ref = sets.models;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              orderedSet = ref[i];
              results.push(_this.fetchSet(orderedSet, sets, finalHashes, success, error));
            }
            return results;
          };
        })(this)
      });
    },
    fetchSet: function(orderedSet, orderedSets, finalHashes, success, error) {
      var id, itemType, method, setItems;
      itemType = orderedSet.get('item_type');
      id = orderedSet.get('id');
      if (itemType === 'FeaturedLink') {
        setItems = new FeaturedLinks([]);
        method = 'fetchUntilEnd';
      } else {
        setItems = new Backbone.Collection([]);
        method = 'fetch';
      }
      setItems.url = API_URL + "/api/v1/set/" + id + "/items";
      setItems.id = id;
      return setItems[method]({
        success: function(items) {
          var set;
          set = orderedSets.get(items.id);
          items = itemType === 'FeaturedLink' ? new FeaturedLinks(items.toJSON()) : items;
          finalHashes.push({
            orderedSet: set,
            items: items
          });
          return success();
        },
        error: function(m, e) {
          return error(e);
        }
      });
    }
  };

}).call(this);
