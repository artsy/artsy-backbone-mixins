// Generated by CoffeeScript 1.10.0
(function() {
  var ARTSY_URL, Backbone, Q, Qs, _, parse;

  _ = require('underscore');

  Q = require('bluebird-q');

  Qs = require('qs');

  Backbone = require('backbone');

  parse = require('url').parse;

  ARTSY_URL = '';

  module.exports = function(a) {
    ARTSY_URL = a;
    return module.exports.methods;
  };

  module.exports.methods = {
    fetchUntilEnd: function(options) {
      var fetchPage, opts, page, ref;
      if (options == null) {
        options = {};
      }
      page = ((ref = options.data) != null ? ref.page : void 0) - 1 || 0;
      opts = _.clone(options);
      fetchPage = (function(_this) {
        return function() {
          var ref1;
          return _this.fetch(_.extend(opts, {
            data: _.extend((ref1 = opts.data) != null ? ref1 : {}, {
              page: page += 1
            }),
            remove: false,
            complete: function() {},
            success: function(col, res) {
              if (typeof options.each === "function") {
                options.each(col, res);
              }
              if (res.length === 0) {
                if (typeof options.success === "function") {
                  options.success(_this);
                }
                return typeof options.complete === "function" ? options.complete(_this) : void 0;
              } else {
                return fetchPage();
              }
            },
            error: function() {
              if (typeof options.error === "function") {
                options.error.apply(options, arguments);
              }
              return typeof options.complete === "function" ? options.complete() : void 0;
            }
          }));
        };
      })(this);
      return fetchPage();
    },
    fetchSetItemsByKey: function(key, options) {
      if (options == null) {
        options = {};
      }
      return new Backbone.Collection(null).fetch({
        url: ARTSY_URL + "/api/v1/sets?key=" + key,
        cache: options.cache,
        success: (function(_this) {
          return function(sets) {
            if (!sets.length) {
              return options.success(_this);
            }
            return new Backbone.Collection(null).fetch({
              url: ARTSY_URL + "/api/v1/set/" + (sets.first().get('id')) + "/items",
              cache: options.cache,
              success: function(col) {
                _this.reset(col.toJSON());
                return options.success(_this);
              },
              error: options.error
            });
          };
        })(this),
        error: options.error
      });
    },
    fetchUntilEndInParallel: function(options) {
      var dfd, error, size, success;
      if (options == null) {
        options = {};
      }
      dfd = Q.defer();
      success = options.success, error = options.error;
      size = (options.data = _.defaults(options.data || {}, {
        total_count: 1,
        size: 10
      })).size;
      options.remove = false;
      options.data = decodeURIComponent(Qs.stringify(options.data, {
        arrayFormat: 'brackets'
      }));
      options.error = (function(_this) {
        return function() {
          dfd.reject.apply(dfd, arguments);
          return typeof error === "function" ? error.apply(null, arguments) : void 0;
        };
      })(this);
      options.success = (function(_this) {
        return function(collection, response, opts) {
          var ref, ref1, ref2, remaining, total;
          total = parseInt((opts != null ? (ref = opts.res) != null ? (ref1 = ref.headers) != null ? ref1['x-total-count'] : void 0 : void 0 : void 0) || (opts != null ? (ref2 = opts.xhr) != null ? typeof ref2.getResponseHeader === "function" ? ref2.getResponseHeader('X-Total-Count') : void 0 : void 0 : void 0) || 0);
          if (response.length >= total) {
            dfd.resolve(_this);
            return typeof success === "function" ? success(_this) : void 0;
          } else {
            options.data = Qs.parse(options.data);
            remaining = Math.ceil(total / size) - 1;
            return Q.allSettled(_.times(remaining, function(n) {
              var data;
              data = _.extend(_.omit(options.data, 'total_count'), {
                page: n + 2
              });
              data = decodeURIComponent(Qs.stringify(data, {
                arrayFormat: 'brackets'
              }));
              return _this.fetch(_.extend(_.omit(options, 'success', 'error'), {
                data: data
              }));
            })).then(function() {
              dfd.resolve(_this);
              return typeof success === "function" ? success(_this, response, opts) : void 0;
            }, function() {
              dfd.reject(_this);
              return typeof error === "function" ? error(_this, response, opts) : void 0;
            }).done();
          }
        };
      })(this);
      this.fetch(options);
      return dfd.promise;
    }
  };

}).call(this);
